Il s'agit de declaration de code javascript
-Creation d'un projet: npx create-react-app my-app 
-Lancement: npm start
-Composant interessant  d'un projet:
    -Dossier Src: contient le code source de l'app
    -Package.json: contient les dépendances
-Comment React fonctionne:
    -Creaction de ses propre element HTML
    -On parle "de composant"
    ( à finir)

- Le passage de  parametre via props:
      <ExpenseItem
        title="BigTitle"
      />

        function ExpenseItem(props) {
        return (
           <h2>{props.title}</h2>
         );
        }
-Utilisation des Hook:
  -useState:
              import React, {useState} from 'react';
              const [title, setTitle] = useState('title init");

              setTitle("new title")
              <h2>{title}</h2>
  -Utilisation d'un seul state ou state multiple:(a revoir)
-Communication parent to child: avec props
-Communication child to parent: avec un pointage vers une fonction
  -Parent:
           const [DateFilter,SetDateFilter]=  useState('2020')
            const filterChangeHandler=(selectedDate)=> {
              console.log(selectedDate)
              SetDateFilter(selectedDate)
            }

           <ExpensesFilter selected={DateFilter} onChangeFilter={filterChangeHandler} ></ExpensesFilter>
  -Child:
          const ExpensesFilter = (props) => {
          const ChangeDateFilterHandler  = (event) =>{
              props.onChangeFilter(event.target.value);
              console.log(event.target.value)
          }

          <select onChange={ChangeDateFilterHandler} value={props.selected}>
-Controlled vs UnControlled component:
    -Un composant Controlled est un composant qui prend sa valeur actuelle  via "props" et notifie les modifications via des rappels tels que onChange
    -Un composant UnControlled est un composant qui stocke son propre état en interne et vous interrogez le DOM à l'aide d'un refpour trouver sa valeur actuelle lorsque vous en avez besoin.
-Statefull vs Stateless component:
    Lorsqu'un composant  contient un état ou plusieurs: " useState" il est alors Statefull sinon il est Stateless
-Keys:
Les clés aident React à identifier quels éléments d’une liste ont changé, ont été ajoutés ou supprimés.
-Rendering conditionnal content:
      Meth1: condition ? Content1 : ElseContent
      Meth2: condition &&  Content1 
             !condition && ElseContent
-Dynamic style:
  (a rediger: one line et par classe)
  -Package Styled Components:
  -Css modules
-Coprendre les erreurs:
  -utiliser l'extension react developper tool
  https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi

limitation de JSX:
    -un seul  element a retourner : solus: englober les retour dans un seul div ou un tableau d element jsx
    ce qui ajoute un nouveau probleme: la possibilité de plusieur div imbriqué non necessaire
    SOlus à ça: utiliser les wrapper: un composant vide  qui retourne ses enfants
        Custum wrapper:
            wrapper.js: const Wrapper = props=>{
                return props.children;
            }
            export default Wrapper;
            impport Wrapper...
            <Wrapper> ... </Wrapper>
        -   <> ...</> empty fragment: supporte pas les attribut comme key
        - <react.fragment> ... </react.fragment>
-Portal: pour afficher des composants enfants dans un nœud DOM qui existe en dehors de la hiérarchie DOM du composant parent.
  ReactDOM.createPortal(child, container)
  dependance: react-dom
-Ref: accéder à l'élément DOM et à l'élément React. Ils sont utilisés dans les cas où nous voulons changer la valeur d'un composant enfant.

-Useeffect: c'est une fonction qui s execute des qu'un changement a lieu sur les dependance concernées
- la destructuration et renommer le resultat: (video 117 interessant vrmt)
        const {isvalid: emailIsValid}= validateur  et j'utilise par la suite emailIsValid
            
-UseReducer: comme useState mais  pour les state plus complex exemple verifier la validit& de l email et verifier la valeur
-UseConext: permet de rendre des données accessibles par tout les autres composant directelent sans utiliser props et pas passer par  tt les parents

-En cas de changement d'un composant tout les element qui sont dans sa fction JSX sont reevalués
-React.memo  peut etre utiliser si votre composant rend le même résultat avec les mêmes props, vous pouvez l'envelopper dans un appel à React.memo pour une amélioration des performances dans certains cas en mémorisant le résultat. Cela signifie que React ignorera le rendu du composant et réutilisera le dernier résultat rendu.
React.memo ne vérifie que les modifications apportées aux props. Si votre composant de fonction enveloppé dans React.memo a un useState, useReducer ou useContext Hook dans son implémentation, il sera toujours restitué lorsque l'état ou le contexte change.
useMemo recalculera la valeur mémoïsée seulement si une des entrées a changé. Cette optimisation permet d’éviter des calculs coûteux à chaque rendu.

-useCallback renverra une version mémoïsée de la fonction de rappel qui changera uniquement si une des entrées a changé. C’est utile pour passer des fonctions de rappel à des composants enfants optimisés qui se basent sur une égalité référentielle pour éviter des rendus superflus


-La communication avec la base de sonnées se fait  via des echange http avec le backend. l'envoi d'une requetese fait via fetch
- on utilise state à la place de ref pour  la recuperation d'un input dans le cas ou :
	 on veut faire des validations à chaque entrée clavier( onchange) state le fait mais pas ref
	 si on veut faire un resset à l input, avec ref on est mené à  manipuler le dom et c'est à eviter
	 
-Custum hook:
Construire vos propres Hooks vous permet d’extraire la logique d’un composant sous forme de fonctions réutilisables.

